// <auto-generated />
using System;
using KindHands.DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KindHands.DAL.Migrations
{
    [DbContext(typeof(KindHandsContext))]
    [Migration("20240626100520_Scaffold database")]
    partial class Scaffolddatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("KindHands.DAL.Models.Ad", b =>
                {
                    b.Property<int>("AdId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Information")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrganisationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AdId");

                    b.HasIndex(new[] { "OrganisationId" }, "IX_Ads_OrganisationId");

                    b.ToTable("Ads");
                });

            modelBuilder.Entity("KindHands.DAL.Models.Organisation", b =>
                {
                    b.Property<int>("OrganisationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrganisationId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("OrganisationId");

                    b.HasIndex(new[] { "UserId" }, "IX_Organisations_UserId");

                    b.ToTable("Organisations");
                });

            modelBuilder.Entity("KindHands.DAL.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("KindHands.DAL.Models.Volunteer", b =>
                {
                    b.Property<int>("VolunteerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VolunteerId"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("VolunteerId");

                    b.HasIndex(new[] { "UserId" }, "IX_Volunteers_UserId");

                    b.ToTable("Volunteers");
                });

            modelBuilder.Entity("KindHands.DAL.Models.VolunteerAd", b =>
                {
                    b.Property<int>("VolunteerAdId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VolunteerAdId"));

                    b.Property<int?>("AdId")
                        .HasColumnType("int");

                    b.Property<int?>("VolunteerId")
                        .HasColumnType("int");

                    b.HasKey("VolunteerAdId");

                    b.HasIndex(new[] { "AdId" }, "IX_VolunteerAds_AdId");

                    b.HasIndex(new[] { "VolunteerId" }, "IX_VolunteerAds_VolunteerId");

                    b.ToTable("VolunteerAds");
                });

            modelBuilder.Entity("KindHands.DAL.Models.Ad", b =>
                {
                    b.HasOne("KindHands.DAL.Models.Organisation", "Organisation")
                        .WithMany("Ads")
                        .HasForeignKey("OrganisationId");

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("KindHands.DAL.Models.Organisation", b =>
                {
                    b.HasOne("KindHands.DAL.Models.User", "User")
                        .WithMany("Organisations")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("KindHands.DAL.Models.Volunteer", b =>
                {
                    b.HasOne("KindHands.DAL.Models.User", "User")
                        .WithMany("Volunteers")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("KindHands.DAL.Models.VolunteerAd", b =>
                {
                    b.HasOne("KindHands.DAL.Models.Ad", "Ad")
                        .WithMany("VolunteerAds")
                        .HasForeignKey("AdId");

                    b.HasOne("KindHands.DAL.Models.Volunteer", "Volunteer")
                        .WithMany("VolunteerAds")
                        .HasForeignKey("VolunteerId");

                    b.Navigation("Ad");

                    b.Navigation("Volunteer");
                });

            modelBuilder.Entity("KindHands.DAL.Models.Ad", b =>
                {
                    b.Navigation("VolunteerAds");
                });

            modelBuilder.Entity("KindHands.DAL.Models.Organisation", b =>
                {
                    b.Navigation("Ads");
                });

            modelBuilder.Entity("KindHands.DAL.Models.User", b =>
                {
                    b.Navigation("Organisations");

                    b.Navigation("Volunteers");
                });

            modelBuilder.Entity("KindHands.DAL.Models.Volunteer", b =>
                {
                    b.Navigation("VolunteerAds");
                });
#pragma warning restore 612, 618
        }
    }
}
